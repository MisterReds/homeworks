import random

def draw_board(board):
  # board - это список из девяти элементов, каждый из которых может быть "X", "O" или " "
  # Например, board = ["X", "O", " ", " ", "X", " ", "O", " ", " "]
  # Выводим первую строку игрового поля
  print("\t", board[0], "|", board[1], "|", board[2])
  # Выводим разделительную линию
  print("\t", "---------")
  # Выводим вторую строку игрового поля
  print("\t", board[3], "|", board[4], "|", board[5])
  # Выводим разделительную линию
  print("\t", "---------")
  # Выводим третью строку игрового поля
  print("\t", board[6], "|", board[7], "|", board[8])

def get_player_move(board, symbol):
  # board - это список из девяти элементов, представляющих игровое поле
  # symbol - это символ, которым играет игрок ("X" или "O")
  # Выводим приглашение для ввода хода
  print("Ход игрока", symbol)
  # Запускаем бесконечный цикл
  while True:
    # Считываем строку, введенную пользователем
    move = input("Введите номер клетки (от 1 до 9): ")
    # Преобразуем строку в целое число
    move = int(move)
    # Проверяем, что число в допустимом диапазоне
    if 1 <= move <= 9:
      # Проверяем, что клетка свободна
      if board[move - 1] == " ":
        # Возвращаем номер клетки
        return move
      else:
        # Выводим сообщение об ошибке
        print("Эта клетка уже занята, попробуйте другую")
    else:
      # Выводим сообщение об ошибке
      print("Неверный номер клетки, попробуйте еще раз")

def get_computer_move(board, symbol):
  # board - это список из девяти элементов, представляющих игровое поле
  # symbol - это символ, которым играет компьютер ("X" или "O")
  # Выводим сообщение о ходе компьютера
  print("Ход компьютера", symbol)
  # Создаем список из свободных клеток
  free_cells = [i + 1 for i in range(9) if board[i] == " "]
  # Выбираем случайную клетку из списка
  move = random.choice(free_cells)
  # Возвращаем номер клетки
  return move


def check_win(board, symbol):
  # board - это список из девяти элементов, представляющих игровое поле
  # symbol - это символ, которым играет игрок ("X" или "O")
  # Создаем список из всех возможных выигрышных комбинаций
  win_combinations = [
    [1, 2, 3], # Первая строка
    [4, 5, 6], # Вторая строка
    [7, 8, 9], # Третья строка
    [1, 4, 7], # Первый столбец
    [2, 5, 8], # Второй столбец
    [3, 6, 9], # Третий столбец
    [1, 5, 9], # Главная диагональ
    [3, 5, 7]  # Побочная диагональ
  ]
  # Перебираем все комбинации
  for combination in win_combinations:
    # Проверяем, что все три клетки в комбинации заняты символом игрока
    if board[combination[0] - 1] == symbol and board[combination[1] - 1] == symbol and board[combination[2] - 1] == symbol:
      # Возвращаем True, если есть победа
      return True
  # Возвращаем False, если нет победы
  return False

def main():
  # Создаем список из девяти элементов, представляющих игровое поле
  board = [" "] * 9
  # Определяем символы, которыми играют игроки
  player_symbol = "X"
  computer_symbol = "O"
  # Определяем, кто ходит первым
  turn = random.choice(["player", "computer"])
  # Запускаем цикл, в котором игроки будут делать ходы
  while True:
    # Рисуем игровое поле
    draw_board(board)
    # Проверяем, есть ли свободное место на игровом поле
    if " " in board:
      # Проверяем, чей ход
      if turn == "player":
        # Запрашиваем ход игрока
        move = get_player_move(board, player_symbol)
        # Заполняем клетку символом игрока
        board[move - 1] = player_symbol
        # Проверяем, есть ли победа игрока
        if check_win(board, player_symbol):
          # Выводим сообщение о победе
          print("Вы победили!")
          # Выходим из цикла
          break
        # Меняем ход на компьютера
        turn = "computer"
      else:
        # Генерируем ход компьютера
        move = get_computer_move(board, computer_symbol)
        # Заполняем клетку символом компьютера
        board[move - 1] = computer_symbol
        # Проверяем, есть ли победа компьютера
        if check_win(board, computer_symbol):
          # Выводим сообщение о победе
          print("Вы проиграли!")
          # Выходим из цикла
          break
        # Меняем ход на игрока
        turn = "player"
    else:
      # Выводим сообщение о ничьей
      print("Ничья!")
      # Выходим из цикла
      break
  # Рисуем финальное состояние игрового поля
  draw_board(board)

# Запускаем игру, вызвав функцию main
main()
